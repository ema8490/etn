Note: benchmarks run on Mike's MacBook. On this machine, the memcpy
control gets 244,897,959 bytes per second.

= 09/12/11 ====================================================================

Use arrays instead of tuples in certificate to avoid malloc. *** Had to
hand-write certificate type because inspect is not generating proper
code for arrays. ***

Without profiling enabled (32-bit):

real	0m0.127s
user	0m0.121s
sys	0m0.004s

120 Bytes * 100,000 iterations = 94,488,188 per second

With gprof profiling enabled (32-bit):

  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ns/call  ns/call  name    
 23.53      0.04     0.04                             memcpy
 17.65      0.07     0.03   700000    42.86    42.86  _encodeArray
 17.65      0.10     0.03   699993    42.86    55.36  _decodeArray
 11.76      0.12     0.02   100000   200.00   600.01  _encodeStruct
  5.88      0.13     0.01  1600000     6.25     6.25  readMem
  5.88      0.14     0.01   200000    50.00    50.00  _encodeScalar
  5.88      0.15     0.01   100000   100.00   500.00  _decodeStruct
  5.88      0.16     0.01                             __profile_frequency
  5.88      0.17     0.01                             cfree
  0.00      0.17     0.00  1599984     0.00     0.00  writeNull
  0.00      0.17     0.00   200000     0.00     6.25  _decodeScalar
  0.00      0.17     0.00   100002     0.00     0.00  rbtree_init
  0.00      0.17     0.00   100000     0.00     0.00  rbtree_first
  0.00      0.17     0.00   100000     0.00     0.00  rbtree_insert
  0.00      0.17     0.00   100000     0.00     0.00  rbtree_lookup
  0.00      0.17     0.00   100000     0.00     0.00  rbtree_next
  0.00      0.17     0.00       16     0.00     0.00  writeMem
  0.00      0.17     0.00        7     0.00    12.50  _decodeTuple
  0.00      0.17     0.00        1     0.00     0.00  main

= 09/12/11 ====================================================================

Introduce a _{en,de}code function per base type. Replace _{en,de}code/case
statement with function lookup table. Cheat when encoding vector types
whose elements are scalar types.

Without profiling enabled (32-bit):

real	0m0.228s
user	0m0.100s
sys	0m0.101s

120 Bytes * 100,000 iterations = 52,631,578 per second

With gprof profiling enabled (32-bit):

  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ns/call  ns/call  name    
 21.57      0.06     0.06                             _int_malloc
 21.57      0.11     0.06   700000    78.57    78.57  _decodeTuple
 19.61      0.16     0.05                             memcpy
  7.84      0.18     0.02   700000    28.57    28.57  _encodeTuple
  7.84      0.20     0.02   100000   200.00   500.00  _encodeStruct
  3.92      0.21     0.01   100000   100.00   100.00  rbtree_lookup
  3.92      0.22     0.01                             malloc
  3.92      0.23     0.01                             malloc_set_state
  1.96      0.24     0.01   200000    25.00    25.00  _decodeScalar
  1.96      0.24     0.01   100000    50.00   650.01  _decodeStruct
  1.96      0.25     0.01                             __profile_frequency
  1.96      0.25     0.01                             _decodePtr
  1.96      0.26     0.01                             free_check
  0.00      0.26     0.00  1600000     0.00     0.00  readMem
  0.00      0.26     0.00  1599984     0.00     0.00  writeNull
  0.00      0.26     0.00   200000     0.00     0.00  _encodeScalar
  0.00      0.26     0.00   100002     0.00     0.00  rbtree_init
  0.00      0.26     0.00   100000     0.00     0.00  rbtree_first
  0.00      0.26     0.00   100000     0.00     0.00  rbtree_insert
  0.00      0.26     0.00   100000     0.00     0.00  rbtree_next
  0.00      0.26     0.00       16     0.00     0.00  writeMem
  0.00      0.26     0.00        1     0.00     0.00  main

= 09/12/11 ====================================================================

Don't add addresses to red-black tree unless encoding the original type
or a pointer.

Without profiling enabled (32-bit):

real	0m0.722s
user	0m0.695s
sys	0m0.004s

120 Bytes * 100,000 iterations = 16,620,498 per second

With gprof profiling enabled (32-bit):

  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 42.05      0.29     0.29                             _decode
 31.90      0.51     0.22   100000     2.20     2.60  _encode
 14.50      0.61     0.10 12100000     0.01     0.01  readMem
  5.08      0.65     0.04 12099879     0.00     0.00  writeNull
  1.45      0.66     0.01                             _compareFn
  1.45      0.67     0.01                             newDecoder
  1.45      0.68     0.01                             rbtree_init
  1.45      0.69     0.01                             readNull
  0.73      0.69     0.01      121    41.35    41.35  writeMem

= 09/10/11 ====================================================================

Replace trie with red-black tree.

Without profiling enabled (32-bit):

real	0m4.519s
user	0m3.433s
sys	0m0.913s

120 Bytes * 100,000 iterations = 2,655,454 per second

With gprof profiling enabled (32-bit):

  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ns/call  ns/call  name    
 33.06      1.14     1.14 12200000    93.49   119.66  rbtree_insert
 17.69      1.75     0.61 195000010     3.13     3.13  _compareFn
 13.63      2.22     0.47                             _encode
 11.02      2.60     0.38 12200000    31.16    55.02  rbtree_lookup
 10.15      2.95     0.35                             _decode
  7.25      3.20     0.25                             newDecoder
  4.35      3.35     0.15                             __i686.get_pc_thunk.bx
  0.87      3.38     0.03                             rbtree_prev
  0.87      3.41     0.03 12100000     2.48     2.48  readMem
  0.58      3.43     0.02 12099879     1.65     1.65  writeNull
  0.29      3.44     0.01                             encode
  0.29      3.45     0.01                             readNull
  0.00      3.45     0.00   100000     0.00     0.00  rbtree_init
  0.00      3.45     0.00      121     0.00     0.00  writeMem

= 09/10/11 ====================================================================

Fix TrieClear so that it really clears trie. This means that TrieInsert
will be called more often, as the trie is cleared before every encode
iteration.

Without profiling enabled (32-bit):

real	0m8.523s
user	0m8.143s
sys	0m0.029s

120 Bytes * 100,000 iterations = 1,407,954 per second

With gprof profiling enabled (32-bit):

  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 34.03      1.35     1.35 11400000     0.12     0.12  TrieInsert
 33.02      2.66     1.31 12200000     0.11     0.11  TrieLookup
  9.58      3.04     0.38                             _encode
  7.69      3.35     0.31                             _decode
  7.31      3.64     0.29 11399772     0.03     0.03  trieClear
  1.76      3.71     0.07 12100000     0.01     0.01  readMem
  1.76      3.78     0.07                             newDecoder
  1.64      3.84     0.07                             __i686.get_pc_thunk.bx
  1.51      3.90     0.06   100000     0.60     3.50  TrieClear
  0.76      3.93     0.03 12099879     0.00     0.00  writeNull
  0.50      3.95     0.02                             newEncoder
  0.25      3.96     0.01      121    82.71    82.71  writeMem
  0.13      3.97     0.01                             readNull

= 09/04/11 ====================================================================

Without profiling enabled (32-bit):

real	0m3.138s
user	0m3.102s
sys	0m0.006s

120 Bytes * 100,000 iterations = 3,824,091 per second

With gprof profiling enabled (32-bit):

  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 67.72      2.37     2.37 12200000     0.19     0.19  TrieLookup
  9.00      2.69     0.32                             _encode
  8.14      2.97     0.29                             _decode
  6.57      3.20     0.23                             memcpy
  3.43      3.32     0.12   100000     1.20     1.20  TrieClear
  1.71      3.38     0.06 12100000     0.00     0.00  readMem
  1.29      3.43     0.05                             __profile_frequency
  0.71      3.45     0.03                             readNull
  0.57      3.47     0.02                             newEncoder
  0.29      3.48     0.01 12099879     0.00     0.00  writeNull
  0.29      3.49     0.01      121    82.65    82.65  writeMem
  0.14      3.50     0.01                             llseek
  0.14      3.50     0.01                             newDecoder
  0.00      3.50     0.00      228     0.00     0.00  TrieInsert
  0.00      3.50     0.00        1     0.00     0.00  main

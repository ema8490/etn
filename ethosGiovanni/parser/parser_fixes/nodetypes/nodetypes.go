package nt

const (
	TYPE_UNDEFINED = iota
	IDENTIFIER
	INT_LITERAL
	FLOAT_LITERAL
	STRING_LITERAL
	BOOL_LITERAL
	TUPLE_LITERAL
	MAP_LITERAL
	PATH_LITERAL
	SET_LITERAL
	COLON_PARAM
	LITERAL
	ASSIGNMENT
	EXPRESSION
	ADD
	SUB
	MUL
	DIV
	FOREACH
	FOR
	FOR_INIT
	FOR_CONDITION
	FOR_STEP
	BLOCK
	IFTHEN
	IFTHENELSE
	SWITCH
	CASE
	CASE_ELSE
	L_COMPARISON
	L_E_COMPARISON
	G_COMPARISON
	G_E_COMPARISON
	E_COMPARISON
	N_E_COMPARISON
	NOT
	BREAK
	CONTINUE
	RETURN
	OR_EXPRESSION
	AND_EXPRESSION
	FUNCTION_CALL
	FUNCTION_DEFINITION
	VALUE_ACCESS
	SQUARE_ACCESS
	PROGRAM
	EXPORT
	VAR
	UNARY_MINUS
	IDENTIFIERS_COUPLE
	PIPELINE
	PIPELINES
	PIPELINE_BG
	EXEC
	CONSTRUCTOR
	REDIRECTIONS
	REDIR_IN
	REDIR_OUT
)

var NODE_TYPES = map[int]string{
	TYPE_UNDEFINED:      "?",
	IDENTIFIER:          "IDENTIFIER",
	INT_LITERAL:         "INT_LITERAL",
	FLOAT_LITERAL:       "FLOAT_LITERAL",
	STRING_LITERAL:      "STRING_LITERAL",
	BOOL_LITERAL:        "BOOL_LITERAL",
	TUPLE_LITERAL:       "TUPLE_LITERAL",
	MAP_LITERAL:         "MAP_LITERAL",
	PATH_LITERAL:        "PATH_LITERAL",
	COLON_PARAM:         "COLON_PARAM",
	ASSIGNMENT:          "ASSIGNMENT",
	EXPRESSION:          "EXPRESSION",
	ADD:                 "ADD",
	SUB:                 "SUB",
	MUL:                 "MUL",
	DIV:                 "DIV",
	FOREACH:             "FOREACH",
	FOR:                 "FOR",
	FOR_INIT:            "FOR_INIT",
	FOR_CONDITION:       "FOR_CONDITION",
	FOR_STEP:            "FOR_STEP",
	BLOCK:               "BLOCK",
	IFTHEN:              "IFTHEN",
	IFTHENELSE:          "IFTHENELSE",
	SWITCH:              "SWITCH",
	CASE:                "CASE",
	CASE_ELSE:           "CASE_ELSE",
	L_COMPARISON:        "L_COMPARISON",
	L_E_COMPARISON:      "L_E_COMPARISON",
	G_COMPARISON:        "G_COMPARISON",
	G_E_COMPARISON:      "G_E_COMPARISON",
	E_COMPARISON:        "E_COMPARISON",
	N_E_COMPARISON:      "N_E_COMPARISON",
	NOT:                 "NOT",
	BREAK:               "BREAK",
	CONTINUE:            "CONTINUE",
	RETURN:              "RETURN",
	OR_EXPRESSION:       "OR_EXPRESSION",
	AND_EXPRESSION:      "AND_EXPRESSION",
	FUNCTION_CALL:       "FUNCTION_CALL",
	FUNCTION_DEFINITION: "FUNCTION_DEFINITION",
	PROGRAM:             "PROGRAM",
	VALUE_ACCESS:        "VALUE_ACCESS",
	SQUARE_ACCESS:       "SQUARE_ACCESS",
	EXPORT:              "EXPORT",
	VAR:                 "VAR",
	UNARY_MINUS:         "UNARY_MINUS",
	IDENTIFIERS_COUPLE:  "IDENTIFIERS_COUPLE",
	PIPELINE:            "PIPELINE",
	PIPELINES:           "PIPELINES",
	PIPELINE_BG:         "PIPELINE_BG",
	EXEC:                "EXEC",
	CONSTRUCTOR:         "CONSTRUCTOR",
	REDIRECTIONS:        "REDIRECTIONS",
	REDIR_IN:            "REDIR_IN",
	REDIR_OUT:           "REDIR_OUT",
}
